{"version":3,"file":"index.modern.js","sources":["../src/utils.ts","../src/index.ts"],"sourcesContent":["export interface Streak {\r\n  currentCount: number;\r\n  startDate: string;\r\n  lastLoginDate: string;\r\n}\r\n\r\nexport const KEY = 'streak';\r\n\r\nexport function formattedDate(date: Date): string {\r\n  // returns date as 11/11/2021\r\n  // other times it returns 11/11/2021, 12:00:00 AM\r\n  // which is why we call the .split at the end\r\n  return date.toLocaleDateString('en-US');\r\n}\r\n\r\nexport function buildStreak(\r\n  date: Date,\r\n  overrideDefaults?: Partial<Streak>\r\n): Streak {\r\n  const defaultStreak = {\r\n    currentCount: 1,\r\n    startDate: formattedDate(date),\r\n    lastLoginDate: formattedDate(date),\r\n  };\r\n\r\n  return {\r\n    ...defaultStreak,\r\n    ...overrideDefaults,\r\n  };\r\n}\r\n\r\nexport function updateStreak(storage: Storage, streak: Streak): void {\r\n  storage.setItem(KEY, JSON.stringify(streak));\r\n}\r\n","import { formattedDate, Streak, buildStreak, updateStreak } from './utils';\r\n\r\nconst KEY = 'streak';\r\n\r\nfunction shouldIncrementOrResetStreakCount(\r\n  currentDate: Date,\r\n  lastLoginDate: string\r\n): 'increment' | 'reset' | 'none' {\r\n  // We get 11/5/2021\r\n  // so to get 5, we split on / and get the second item\r\n  const difference =\r\n    currentDate.getDate() - parseInt(lastLoginDate.split('/')[1]);\r\n  // This means they logged in the day after the currentDate\r\n  if (difference === 1) {\r\n    return 'increment';\r\n  }\r\n  if (difference === 0) {\r\n    return 'none';\r\n  }\r\n  // Otherwise they logged in after a day, which would\r\n  // break the streak\r\n  return 'reset';\r\n}\r\n\r\nexport function streakCounter(storage: Storage, date: Date): Streak {\r\n  const streakInLocalStorage = storage.getItem(KEY);\r\n  if (streakInLocalStorage) {\r\n    try {\r\n      const streak = JSON.parse(streakInLocalStorage) as Streak;\r\n      const state = shouldIncrementOrResetStreakCount(\r\n        date,\r\n        streak.lastLoginDate\r\n      );\r\n      const SHOULD_INCREMENT = state === 'increment';\r\n      const SHOULD_RESET = state === 'reset';\r\n\r\n      if (SHOULD_INCREMENT) {\r\n        const updatedStreak = buildStreak(date, {\r\n          startDate: streak.startDate,\r\n          currentCount: streak.currentCount + 1,\r\n          lastLoginDate: formattedDate(date),\r\n        });\r\n        // store in localStorage\r\n        updateStreak(storage, updatedStreak);\r\n        return updatedStreak;\r\n      }\r\n\r\n      if (SHOULD_RESET) {\r\n        const updatedStreak: Streak = buildStreak(date);\r\n        updateStreak(storage, updatedStreak);\r\n        return updatedStreak;\r\n      }\r\n\r\n      return streak;\r\n    } catch (error) {\r\n      console.error('Failed to parse streak from localStorage');\r\n    }\r\n  }\r\n\r\n  const streak = buildStreak(date);\r\n\r\n  // store in localStorage\r\n  updateStreak(storage, streak);\r\n\r\n  return streak;\r\n}\r\n"],"names":["formattedDate","date","toLocaleDateString","buildStreak","overrideDefaults","defaultStreak","currentCount","startDate","lastLoginDate","updateStreak","storage","streak","setItem","JSON","stringify","streakCounter","streakInLocalStorage","getItem","_streak","parse","state","currentDate","difference","getDate","parseInt","split","shouldIncrementOrResetStreakCount","SHOULD_RESET","updatedStreak","error","console"],"mappings":"oOAQgBA,SAAAA,EAAcC,GAI5B,OAAWA,EAACC,mBAAmB,QAChC,CAEeC,SAAAA,EACdF,EACAG,GAQA,OACKC,EAAAA,CAAAA,EAPiB,CACpBC,aAAc,EACdC,UAAWP,EAAcC,GACzBO,cAAeR,EAAcC,IAK1BG,EAEN,CAEe,SAAAK,EAAaC,EAAkBC,GAC7CD,EAAQE,QA1BS,SA0BIC,KAAKC,UAAUH,GACrC,CCTeI,SAAAA,EAAcL,EAAkBT,GAC9C,MAA0Be,EAAGN,EAAQO,QAvB3B,UAwBV,GAAID,EACF,IACE,MAAYE,EAAGL,KAAKM,MAAMH,GACfI,EAzBjB,SACEC,EACAb,GAIA,MAAgBc,EACdD,EAAYE,UAAYC,SAAShB,EAAciB,MAAM,KAAK,IAE5D,OAAmB,IAAfH,EACK,YAEU,IAAfA,EACK,OAIF,OACR,CAOmBI,CACZzB,EACAU,EAAOH,eAGHmB,EAAyB,UAAVP,EAErB,GAHmC,cAAVA,EAGH,CACpB,MAAmBQ,EAAGzB,EAAYF,EAAM,CACtCM,UAAWI,EAAOJ,UAClBD,aAAcK,EAAOL,aAAe,EACpCE,cAAeR,EAAcC,KAI/B,OADAQ,EAAaC,EAASkB,GACfA,CACR,CAED,GAAID,EAAc,CAChB,MAAMC,EAAwBzB,EAAYF,GAE1C,OADAQ,EAAaC,EAASkB,IAEvB,CAED,OACDV,CAEA,CAFC,MAAOW,GACPC,QAAQD,MAAM,2CACf,CAGH,MAAMlB,EAASR,EAAYF,GAK3B,OAFAQ,EAAaC,EAASC,GAGvBA,CAAA"}